from typing import Any, Literal, Tuple
from sympy.core.relational import Equality, GreaterThan, LessThan, Ne, Relational
from sympy.logic.boolalg import BooleanFunction
from sympy.printing.pycode import PythonCodePrinter

class IntervalMathPrinter(PythonCodePrinter):
    ...


class BaseSeries:
    is_2Dline = ...
    is_3Dline = ...
    is_3Dsurface = ...
    is_contour = ...
    is_implicit = ...
    is_interactive = ...
    is_parametric = ...
    is_generic = ...
    is_vector = ...
    is_2Dvector = ...
    is_3Dvector = ...
    _N = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @property
    def expr(self) -> Tuple:
        ...
    
    @expr.setter
    def expr(self, e) -> None:
        ...
    
    @property
    def is_3D(self) -> bool:
        ...
    
    @property
    def is_line(self) -> bool:
        ...
    
    @property
    def line_color(self):
        ...
    
    @line_color.setter
    def line_color(self, val) -> None:
        ...
    
    @property
    def n(self) -> list[int]:
        ...
    
    @n.setter
    def n(self, v) -> None:
        ...
    
    @property
    def params(self):
        ...
    
    @params.setter
    def params(self, p) -> None:
        ...
    
    @property
    def scales(self) -> list[Any]:
        ...
    
    @scales.setter
    def scales(self, v) -> None:
        ...
    
    @property
    def surface_color(self):
        ...
    
    @surface_color.setter
    def surface_color(self, val) -> None:
        ...
    
    @property
    def rendering_kw(self) -> dict[Any, Any]:
        ...
    
    @rendering_kw.setter
    def rendering_kw(self, kwargs) -> None:
        ...
    
    def eval_color_func(self, *args):
        ...
    
    def get_data(self):
        ...
    
    def get_label(self, use_latex=..., wrapper=...) -> str:
        ...
    
    @property
    def label(self) -> str:
        ...
    
    @label.setter
    def label(self, val) -> None:
        ...
    
    @property
    def ranges(self) -> list[Any]:
        ...
    
    @ranges.setter
    def ranges(self, val) -> None:
        ...
    


class Line2DBaseSeries(BaseSeries):
    is_2Dline = ...
    _dim = ...
    _N = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    def get_data(self) -> list[Any] | tuple[Any, Any, Any] | tuple[Any, Any] | tuple[Any, Any, Any, Any] | tuple[Any, Any, Any, Any, Any] | tuple[Any, Any, Any, Any, Any, Any] | tuple[Any, ...]:
        ...
    
    def get_segments(self):
        ...
    
    @property
    def var(self) -> None:
        ...
    
    @property
    def start(self) -> None:
        ...
    
    @property
    def end(self) -> None:
        ...
    
    @property
    def xscale(self):
        ...
    
    @xscale.setter
    def xscale(self, v) -> None:
        ...
    
    def get_color_array(self):
        ...
    


class List2DSeries(Line2DBaseSeries):
    def __init__(self, list_x, list_y, label=..., **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class LineOver1DRangeSeries(Line2DBaseSeries):
    def __init__(self, expr, var_start_end, label=..., **kwargs) -> None:
        ...
    
    @property
    def nb_of_points(self) -> int:
        ...
    
    @nb_of_points.setter
    def nb_of_points(self, v) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_points(self) -> list[Any] | tuple[Any, Any]:
        ...
    


class ParametricLineBaseSeries(Line2DBaseSeries):
    is_parametric = ...
    def get_label(self, use_latex=..., wrapper=...) -> str:
        ...
    
    def get_parameter_points(self):
        ...
    
    def get_points(self) -> list[Any]:
        ...
    
    @property
    def nb_of_points(self) -> int:
        ...
    
    @nb_of_points.setter
    def nb_of_points(self, v) -> None:
        ...
    


class Parametric2DLineSeries(ParametricLineBaseSeries):
    is_2Dline = ...
    def __init__(self, expr_x, expr_y, var_start_end, label=..., **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class Line3DBaseSeries(Line2DBaseSeries):
    is_2Dline = ...
    is_3Dline = ...
    _dim = ...
    def __init__(self) -> None:
        ...
    


class Parametric3DLineSeries(ParametricLineBaseSeries):
    is_2Dline = ...
    is_3Dline = ...
    def __init__(self, expr_x, expr_y, expr_z, var_start_end, label=..., **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_data(self) -> tuple[Any, Any, Any, Any]:
        ...
    


class SurfaceBaseSeries(BaseSeries):
    is_3Dsurface = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def get_color_array(self):
        ...
    


class SurfaceOver2DRangeSeries(SurfaceBaseSeries):
    def __init__(self, expr, var_start_end_x, var_start_end_y, label=..., **kwargs) -> None:
        ...
    
    @property
    def var_x(self):
        ...
    
    @property
    def var_y(self):
        ...
    
    @property
    def start_x(self) -> float:
        ...
    
    @property
    def end_x(self) -> float:
        ...
    
    @property
    def start_y(self) -> float:
        ...
    
    @property
    def end_y(self) -> float:
        ...
    
    @property
    def nb_of_points_x(self) -> int:
        ...
    
    @nb_of_points_x.setter
    def nb_of_points_x(self, v) -> None:
        ...
    
    @property
    def nb_of_points_y(self) -> int:
        ...
    
    @nb_of_points_y.setter
    def nb_of_points_y(self, v) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_meshes(self) -> tuple[Any, Any] | tuple[Any, Any, Any] | tuple[Any, Any, Any, Any] | tuple[Any, Any, Any, Any, Any] | tuple[Any, Any, Any, Any, Any, Any] | tuple[Any, ...]:
        ...
    
    def get_data(self) -> tuple[Any, Any] | tuple[Any, Any, Any] | tuple[Any, Any, Any, Any] | tuple[Any, Any, Any, Any, Any] | tuple[Any, Any, Any, Any, Any, Any] | tuple[Any, ...]:
        ...
    


class ParametricSurfaceSeries(SurfaceBaseSeries):
    is_parametric = ...
    def __init__(self, expr_x, expr_y, expr_z, var_start_end_u, var_start_end_v, label=..., **kwargs) -> None:
        ...
    
    @property
    def var_u(self):
        ...
    
    @property
    def var_v(self):
        ...
    
    @property
    def start_u(self) -> float:
        ...
    
    @property
    def end_u(self) -> float:
        ...
    
    @property
    def start_v(self) -> float:
        ...
    
    @property
    def end_v(self) -> float:
        ...
    
    @property
    def nb_of_points_u(self) -> int:
        ...
    
    @nb_of_points_u.setter
    def nb_of_points_u(self, v) -> None:
        ...
    
    @property
    def nb_of_points_v(self) -> int:
        ...
    
    @nb_of_points_v.setter
    def nb_of_points_v(self, v) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_parameter_meshes(self) -> tuple[Any, ...] | tuple[()] | tuple[Any] | tuple[Any, Any] | tuple[Any, Any, Any]:
        ...
    
    def get_meshes(self) -> tuple[Any, ...] | tuple[Any, Any, Any]:
        ...
    
    def get_data(self) -> tuple[Any, Any] | tuple[Any, Any, Any] | tuple[Any, Any, Any, Any] | tuple[Any, Any, Any, Any, Any] | tuple[Any, Any, Any, Any, Any, Any] | tuple[Any, ...]:
        ...
    


class ContourSeries(SurfaceOver2DRangeSeries):
    is_3Dsurface = ...
    is_contour = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    


class GenericDataSeries(BaseSeries):
    is_generic = ...
    def __init__(self, tp, *args, **kwargs) -> None:
        ...
    
    def get_data(self) -> tuple[Any, ...]:
        ...
    


class ImplicitSeries(BaseSeries):
    is_implicit = ...
    use_cm = ...
    _N = ...
    def __init__(self, expr, var_start_end_x, var_start_end_y, label=..., **kwargs) -> None:
        ...
    
    @property
    def expr(self) -> BooleanFunction | Equality | Relational | Ne | GreaterThan | LessThan | None:
        ...
    
    @expr.setter
    def expr(self, expr) -> None:
        ...
    
    @property
    def line_color(self):
        ...
    
    @line_color.setter
    def line_color(self, v) -> None:
        ...
    
    color = ...
    def __str__(self) -> str:
        ...
    
    def get_data(self) -> tuple[list[Any], Literal['fill']] | tuple[Any, Any, Any, Literal['contour']] | tuple[Any, Any, Any, Literal['contourf']]:
        ...
    
    def get_label(self, use_latex=..., wrapper=...) -> str:
        ...
    


def centers_of_segments(array):
    ...

def centers_of_faces(array):
    ...

def flat(x, y, z, eps=...):
    ...

