import functools
import pathlib
from typing import List, Optional, Tuple

TESTPATHS_DEFAULT = ...
BLACKLIST_DEFAULT = ...
class PytestPluginManager:
    PYTEST: str = ...
    RANDOMLY: str = ...
    SPLIT: str = ...
    TIMEOUT: str = ...
    XDIST: str = ...
    @functools.cached_property
    def has_pytest(self) -> bool:
        ...
    
    @functools.cached_property
    def has_randomly(self) -> bool:
        ...
    
    @functools.cached_property
    def has_split(self) -> bool:
        ...
    
    @functools.cached_property
    def has_timeout(self) -> bool:
        ...
    
    @functools.cached_property
    def has_xdist(self) -> bool:
        ...
    


split_pattern = ...
@functools.lru_cache
def sympy_dir() -> pathlib.Path:
    ...

def update_args_with_rootdir(args: List[str]) -> List[str]:
    ...

def update_args_with_paths(paths: List[str], keywords: Optional[Tuple[str]], args: List[str]) -> List[str]:
    ...

def make_absolute_path(partial_path: str) -> str:
    ...

def test(*paths, subprocess=..., rerun=..., **kwargs) -> bool | None:
    ...

def doctest():
    ...

