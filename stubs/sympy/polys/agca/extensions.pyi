from types import NotImplementedType
from typing import Any, Literal, Self
from sympy.polys.domains.domain import Domain
from sympy.polys.domains.domainelement import DomainElement
from sympy.printing.defaults import DefaultPrinting

class ExtensionElement(DomainElement, DefaultPrinting):
    __slots__ = ...
    def __init__(self, rep, ext) -> None:
        ...
    
    def parent(f) -> Any:
        ...
    
    def as_expr(f):
        ...
    
    def __bool__(f) -> bool:
        ...
    
    def __pos__(f) -> Self:
        ...
    
    def __neg__(f) -> ExtElem:
        ...
    
    def __add__(f, g) -> ExtElem | NotImplementedType:
        ...
    
    __radd__ = ...
    def __sub__(f, g) -> ExtElem | NotImplementedType:
        ...
    
    def __rsub__(f, g) -> ExtElem | NotImplementedType:
        ...
    
    def __mul__(f, g) -> ExtElem | NotImplementedType:
        ...
    
    __rmul__ = ...
    def inverse(f) -> ExtElem:
        ...
    
    def __truediv__(f, g) -> NotImplementedType | ExtElem:
        ...
    
    __floordiv__ = ...
    def __rtruediv__(f, g) -> NotImplementedType:
        ...
    
    __rfloordiv__ = ...
    def __mod__(f, g) -> NotImplementedType:
        ...
    
    def __rmod__(f, g) -> NotImplementedType:
        ...
    
    def __pow__(f, n) -> ExtElem:
        ...
    
    def __eq__(f, g) -> bool:
        ...
    
    def __ne__(f, g) -> bool:
        ...
    
    def __hash__(f) -> int:
        ...
    
    def __str__(f) -> str:
        ...
    
    __repr__ = ...
    @property
    def is_ground(f):
        ...
    
    def to_ground(f):
        ...
    


ExtElem = ExtensionElement
class MonogenicFiniteExtension(Domain):
    is_FiniteExtension = ...
    dtype = ExtensionElement
    def __init__(self, mod) -> None:
        ...
    
    def new(self, arg) -> ExtElem:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    __repr__ = ...
    @property
    def has_CharacteristicZero(self):
        ...
    
    def characteristic(self):
        ...
    
    def convert(self, f, base=...) -> ExtElem:
        ...
    
    def convert_from(self, f, base) -> ExtElem:
        ...
    
    def to_sympy(self, f):
        ...
    
    def from_sympy(self, f) -> ExtElem:
        ...
    
    def set_domain(self, K) -> Self:
        ...
    
    def drop(self, *symbols) -> Self:
        ...
    
    def quo(self, f, g) -> ExtElem:
        ...
    
    def exquo(self, f, g) -> ExtElem:
        ...
    
    def is_negative(self, a) -> Literal[False]:
        ...
    
    def is_unit(self, a) -> bool | None:
        ...
    


FiniteExtension = MonogenicFiniteExtension
