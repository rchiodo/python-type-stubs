from typing import Any, Self
from sympy.polys.matrices.ddm import DDM
from sympy.polys.matrices.dfm import DFM_dummy
from sympy.polys.matrices.sdm import SDM
from sympy.utilities.decorator import doctest_depends_on

flint = ...
__all__ = ['DFM']
@doctest_depends_on(ground_types=['flint'])
class DFM:
    fmt = ...
    is_DFM = ...
    is_DDM = ...
    def __new__(cls, rowslist, shape, domain) -> Self:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    @classmethod
    def from_list(cls, rowslist, shape, domain) -> Self:
        ...
    
    def to_list(self):
        ...
    
    def copy(self) -> Self:
        ...
    
    def to_ddm(self) -> DDM:
        ...
    
    def to_sdm(self) -> SDM:
        ...
    
    def to_dfm(self) -> Self:
        ...
    
    def to_dfm_or_ddm(self) -> Self:
        ...
    
    @classmethod
    def from_ddm(cls, ddm) -> Self:
        ...
    
    @classmethod
    def from_list_flat(cls, elements, shape, domain) -> Self:
        ...
    
    def to_list_flat(self):
        ...
    
    def to_flat_nz(self) -> tuple[list[Any], tuple[tuple[tuple[Any, Any], ...], Any]]:
        ...
    
    @classmethod
    def from_flat_nz(cls, elements, data, domain) -> DFM_dummy:
        ...
    
    def to_dod(self) -> dict[Any, Any]:
        ...
    
    @classmethod
    def from_dod(cls, dod, shape, domain) -> DFM_dummy:
        ...
    
    def to_dok(self) -> dict[Any, Any]:
        ...
    
    def convert_to(self, domain) -> Self | DFM_dummy:
        ...
    
    def getitem(self, i, j):
        ...
    
    def setitem(self, i, j, value) -> None:
        ...
    
    def extract(self, rowslist, colslist) -> Self:
        ...
    
    def extract_slice(self, rowslice, colslice) -> Self:
        ...
    
    def neg(self) -> Self:
        ...
    
    def add(self, other) -> Self:
        ...
    
    def sub(self, other) -> Self:
        ...
    
    def mul(self, other) -> Self:
        ...
    
    def rmul(self, other) -> Self:
        ...
    
    def mul_elementwise(self, other) -> DFM_dummy:
        ...
    
    def matmul(self, other) -> Self:
        ...
    
    def __neg__(self) -> Self:
        ...
    
    @classmethod
    def zeros(cls, shape, domain) -> Self:
        ...
    
    @classmethod
    def ones(cls, shape, domain) -> DFM_dummy:
        ...
    
    @classmethod
    def eye(cls, n, domain) -> DFM_dummy:
        ...
    
    @classmethod
    def diag(cls, elements, domain) -> DFM_dummy:
        ...
    
    def applyfunc(self, func, domain) -> DFM_dummy:
        ...
    
    def transpose(self) -> Self:
        ...
    
    def hstack(self, *others) -> DFM_dummy:
        ...
    
    def vstack(self, *others) -> DFM_dummy:
        ...
    
    def diagonal(self) -> list[Any]:
        ...
    
    def is_upper(self) -> bool:
        ...
    
    def is_lower(self) -> bool:
        ...
    
    def is_diagonal(self) -> bool:
        ...
    
    def is_zero_matrix(self) -> bool:
        ...
    
    def nnz(self) -> int:
        ...
    
    def scc(self) -> list[Any]:
        ...
    
    @doctest_depends_on(ground_types='flint')
    def det(self):
        ...
    
    @doctest_depends_on(ground_types='flint')
    def charpoly(self):
        ...
    
    @doctest_depends_on(ground_types='flint')
    def inv(self) -> Self:
        ...
    
    def lu(self) -> tuple[DFM_dummy, DFM_dummy, list[Any]]:
        ...
    
    @doctest_depends_on(ground_types='flint')
    def lu_solve(self, rhs) -> DFM_dummy | Self:
        ...
    
    def nullspace(self) -> tuple[DFM_dummy, list[int]]:
        ...
    
    def nullspace_from_rref(self, pivots=...) -> tuple[DFM_dummy, list[int]]:
        ...
    
    def particular(self) -> DFM_dummy:
        ...
    
    @doctest_depends_on(ground_types='flint')
    def lll(self, delta=...) -> Self:
        ...
    
    @doctest_depends_on(ground_types='flint')
    def lll_transform(self, delta=...) -> tuple[Self, Self]:
        ...
    


