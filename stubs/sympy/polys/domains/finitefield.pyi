from typing import Any, Literal, Self

from sympy.core.numbers import Integer
from sympy.external.gmpy import GROUND_TYPES
from sympy.utilities.decorator import doctest_depends_on
from sympy.polys.domains.field import Field
from sympy.polys.domains.simpledomain import SimpleDomain
from sympy.utilities import public

if GROUND_TYPES == 'flint':
    ...
else:
    flint = ...
@public
@doctest_depends_on(modules=['python', 'gmpy'])
class FiniteField(Field, SimpleDomain):
    rep = ...
    alias = ...
    is_FF = ...
    is_Numerical = ...
    has_assoc_Ring = ...
    has_assoc_Field = ...
    dom = ...
    mod = ...
    def __init__(self, mod, symmetric=...) -> None:
        ...
    
    @property
    def tp(self) -> Any | type["FiniteField"]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def characteristic(self) -> Any | None:
        ...
    
    def get_field(self) -> Self:
        ...
    
    def to_sympy(self, a) -> Integer:
        ...
    
    def from_sympy(self, a) -> Any | "FiniteField":
        ...
    
    def to_int(self, a) -> int:
        ...
    
    def is_positive(self, a) -> bool:
        ...
    
    def is_nonnegative(self, a) -> Literal[True]:
        ...
    
    def is_negative(self, a) -> Literal[False]:
        ...
    
    def is_nonpositive(self, a) -> bool:
        ...
    
    def from_FF(K1, a, K0=...) -> Any | "FiniteField":
        ...
    
    def from_FF_python(K1, a, K0=...) -> Any | "FiniteField":
        ...
    
    def from_ZZ(K1, a, K0=...) -> Any | "FiniteField":
        ...
    
    def from_ZZ_python(K1, a, K0=...) -> Any | "FiniteField":
        ...
    
    def from_QQ(K1, a, K0=...) -> Any | "FiniteField" | None:
        ...
    
    def from_QQ_python(K1, a, K0=...) -> Any | "FiniteField" | None:
        ...
    
    def from_FF_gmpy(K1, a, K0=...) -> Any | "FiniteField":
        ...
    
    def from_ZZ_gmpy(K1, a, K0=...) -> Any | "FiniteField":
        ...
    
    def from_QQ_gmpy(K1, a, K0=...) -> Any | "FiniteField" | None:
        ...
    
    def from_RealField(K1, a, K0) -> Any | "FiniteField" | None:
        ...
    
    def is_square(self, a) -> bool:
        ...
    
    def exsqrt(self, a) -> Any | "FiniteField" | Literal[0] | None:
        ...
    


GF = ...
FF = ...
