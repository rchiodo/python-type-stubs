import sys
from typing import Any, Literal

_small_trailing = ...
def bit_scan1(x, n=...) -> None:
    ...

def bit_scan0(x, n=...) -> None:
    ...

def remove(x, f) -> tuple[Literal[0], Literal[0]] | tuple[Any, Any | None] | tuple[Any, int]:
    ...

def factorial(x) -> int:
    ...

def sqrt(x) -> int:
    ...

def sqrtrem(x) -> tuple[int, int]:
    ...

if sys.version_info[: 2] >= (3, 9):
    gcd = ...
    lcm = ...
else:
    def gcd(*args) -> int:
        ...
    
    def lcm(*args) -> int:
        ...
    
def gcdext(a, b) -> tuple[Literal[0], Literal[0], Literal[0]] | tuple[Any, Any, Any] | tuple[Any, Any | int, Any | int]:
    ...

def is_square(x) -> bool:
    ...

def invert(x, m):
    ...

def legendre(x, y) -> Literal[0, 1, -1]:
    ...

def jacobi(x, y) -> int:
    ...

def kronecker(x, y) -> int:
    ...

def iroot(y, n) -> tuple[Any, Literal[True]] | tuple[int, bool] | tuple[Literal[1], Literal[False]] | tuple[Any | int, Any]:
    ...

def is_fermat_prp(n, a) -> Literal[False]:
    ...

def is_euler_prp(n, a) -> Literal[False]:
    ...

def is_strong_prp(n, a) -> bool:
    ...

def is_fibonacci_prp(n, p, q) -> Literal[False]:
    ...

def is_lucas_prp(n, p, q) -> bool:
    ...

def is_selfridge_prp(n) -> bool:
    ...

def is_strong_lucas_prp(n, p, q) -> bool:
    ...

def is_strong_selfridge_prp(n) -> bool:
    ...

def is_bpsw_prp(n) -> bool:
    ...

def is_strong_bpsw_prp(n) -> bool:
    ...

